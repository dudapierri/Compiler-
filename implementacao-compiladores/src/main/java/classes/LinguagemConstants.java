/* Generated By:JavaCC: Do not edit this line. LinguagemConstants.java */
package classes;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LinguagemConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CONSTANTE_LITERAL = 11;
  /** RegularExpression Id. */
  int DO = 12;
  /** RegularExpression Id. */
  int THIS = 13;
  /** RegularExpression Id. */
  int BODY = 14;
  /** RegularExpression Id. */
  int DESCRIPTION = 15;
  /** RegularExpression Id. */
  int DECLARATION = 16;
  /** RegularExpression Id. */
  int TYPE = 17;
  /** RegularExpression Id. */
  int IS = 18;
  /** RegularExpression Id. */
  int CONSTANT = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int VARIABLE = 21;
  /** RegularExpression Id. */
  int AS = 22;
  /** RegularExpression Id. */
  int INTEGER = 23;
  /** RegularExpression Id. */
  int REAL = 24;
  /** RegularExpression Id. */
  int STRING = 25;
  /** RegularExpression Id. */
  int LOGIC = 26;
  /** RegularExpression Id. */
  int DESIGNATE = 27;
  /** RegularExpression Id. */
  int READ = 28;
  /** RegularExpression Id. */
  int WRITE = 29;
  /** RegularExpression Id. */
  int ALL = 30;
  /** RegularExpression Id. */
  int AVALIATE = 31;
  /** RegularExpression Id. */
  int TRUE = 32;
  /** RegularExpression Id. */
  int UNTRUE = 33;
  /** RegularExpression Id. */
  int RESULT = 34;
  /** RegularExpression Id. */
  int REPEAT = 35;
  /** RegularExpression Id. */
  int ABRECOLCHETE = 36;
  /** RegularExpression Id. */
  int FECHACOLCHETE = 37;
  /** RegularExpression Id. */
  int ABRECHAVES = 38;
  /** RegularExpression Id. */
  int FECHACHAVES = 39;
  /** RegularExpression Id. */
  int PONTO = 40;
  /** RegularExpression Id. */
  int VIRGULA = 41;
  /** RegularExpression Id. */
  int ATRIBUI = 42;
  /** RegularExpression Id. */
  int MAIS = 43;
  /** RegularExpression Id. */
  int MENOS = 44;
  /** RegularExpression Id. */
  int VEZES = 45;
  /** RegularExpression Id. */
  int DIVISAO = 46;
  /** RegularExpression Id. */
  int POTENCIA = 47;
  /** RegularExpression Id. */
  int RESTODIVISAO = 48;
  /** RegularExpression Id. */
  int RESTODIVISAOINTEIRA = 49;
  /** RegularExpression Id. */
  int IGUAL = 50;
  /** RegularExpression Id. */
  int DIFERENTE = 51;
  /** RegularExpression Id. */
  int MENOR = 52;
  /** RegularExpression Id. */
  int MAIOR = 53;
  /** RegularExpression Id. */
  int MENORIGUAL = 54;
  /** RegularExpression Id. */
  int MAIORIGUAL = 55;
  /** RegularExpression Id. */
  int E = 56;
  /** RegularExpression Id. */
  int OU = 57;
  /** RegularExpression Id. */
  int NAO = 58;
  /** RegularExpression Id. */
  int ABREPARENTESES = 59;
  /** RegularExpression Id. */
  int FECHAPARENTESES = 60;
  /** RegularExpression Id. */
  int LETRA_MINUSCULA = 61;
  /** RegularExpression Id. */
  int LETRA_MAIUSCULA = 62;
  /** RegularExpression Id. */
  int LETRA = 63;
  /** RegularExpression Id. */
  int DIGITO = 64;
  /** RegularExpression Id. */
  int UNDERLINE = 65;
  /** RegularExpression Id. */
  int IDENTIFICADOR = 66;
  /** RegularExpression Id. */
  int I = 67;
  /** RegularExpression Id. */
  int I1 = 68;
  /** RegularExpression Id. */
  int I2 = 69;
  /** RegularExpression Id. */
  int NUMERO_INTEIRO = 70;
  /** RegularExpression Id. */
  int NUMERO_REAL_CASAS_DECIMAIS = 71;
  /** RegularExpression Id. */
  int NUMERO_REAL = 72;
  /** RegularExpression Id. */
  int IDENTIFICADOR_INVALIDO = 73;
  /** RegularExpression Id. */
  int LITERAL_INVALIDA = 74;
  /** RegularExpression Id. */
  int NUMERO_INTEIRO_INVALIDO = 75;
  /** RegularExpression Id. */
  int NUMERO_REAL_INVALIDO = 76;
  /** RegularExpression Id. */
  int SIMBOLOS_INVALIDOS = 77;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int COMENTARIO_LINHA = 1;
  /** Lexical state. */
  int COMENTARIO_BLOCO = 2;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"//\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "\"/*\"",
    "\"*/\"",
    "<token of kind 10>",
    "<CONSTANTE_LITERAL>",
    "\"do\"",
    "\"this\"",
    "\"body\"",
    "\"description\"",
    "\"declaration\"",
    "\"type\"",
    "\"is\"",
    "\"constant\"",
    "\"and\"",
    "\"variable\"",
    "\"as\"",
    "\"integer\"",
    "\"real\"",
    "\"string\"",
    "\"logic\"",
    "\"designate\"",
    "\"read\"",
    "\"write\"",
    "\"all\"",
    "\"avaliate\"",
    "\"true\"",
    "\"untrue\"",
    "\"result\"",
    "\"repeat\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\".\"",
    "\",\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"**\"",
    "\"%\"",
    "\"%%\"",
    "\"==\"",
    "\"!=\"",
    "\"<<\"",
    "\">>\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"(\"",
    "\")\"",
    "<LETRA_MINUSCULA>",
    "<LETRA_MAIUSCULA>",
    "<LETRA>",
    "<DIGITO>",
    "\"_\"",
    "<IDENTIFICADOR>",
    "<I>",
    "<I1>",
    "<I2>",
    "<NUMERO_INTEIRO>",
    "<NUMERO_REAL_CASAS_DECIMAIS>",
    "<NUMERO_REAL>",
    "<IDENTIFICADOR_INVALIDO>",
    "<LITERAL_INVALIDA>",
    "<NUMERO_INTEIRO_INVALIDO>",
    "<NUMERO_REAL_INVALIDO>",
    "<SIMBOLOS_INVALIDOS>",
  };

}
