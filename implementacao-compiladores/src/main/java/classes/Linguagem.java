/* Generated By:JavaCC: Do not edit this line. Linguagem.java */
package classes;

import java.util.List;
import java.util.ArrayList;
import java.lang.StringBuilder;
import java.util.Arrays;

import recovery.RecoverySet;

public class Linguagem implements LinguagemConstants {
   private StringBuilder resultadoLexico = new StringBuilder();
   static List<ErrorStruct> errosSintaticos = new ArrayList<ErrorStruct>();
   public int contParserError = 0;
   public int contErroLexico = 0;
   boolean debug_recovery = false;
   Boolean eof = false;
   public Acoes acaoSemantica = new Acoes();


   public void leituraDeTokens()  {
       List<Integer> palavras_reservadas = new ArrayList(Arrays.asList(
            DO,THIS,BODY,DESCRIPTION,DECLARATION,TYPE,IS,CONSTANT,AND,VARIABLE,AS,INTEGER,REAL,STRING,LOGIC,DESIGNATE,READ,WRITE,ALL,AVALIATE,TRUE,UNTRUE,RESULT,REPEAT
       ));
       List<Integer> simbolos_especiais = new ArrayList(Arrays.asList(
            ABRECOLCHETE,FECHACOLCHETE,ABRECHAVES,FECHACHAVES,PONTO,VIRGULA,ATRIBUI,MAIS,MENOS,VEZES,DIVISAO,POTENCIA,RESTODIVISAO,RESTODIVISAOINTEIRA,IGUAL,DIFERENTE,MENOR,MAIOR,MENORIGUAL,MAIORIGUAL,E,OU,NAO,ABREPARENTESES,FECHAPARENTESES
       ));
       try {
           Token t = null;
           t = getNextToken();
           if (t.kind == EOF) return;
           if (palavras_reservadas.contains(t.kind)){}else
           if (t.kind == IDENTIFICADOR){}else
           if(t.kind == CONSTANTE_LITERAL){}else
           if(t.kind == NUMERO_INTEIRO){}else
           if(t.kind == NUMERO_REAL){}else
           if(simbolos_especiais.contains(t.kind)){}else
           if(t.kind == SIMBOLOS_INVALIDOS){
               contErroLexico++;
               resultadoLexico.append("Erro: '" + t.image + " | Tipo: <SIMBOLOS_INVALIDOS>  |  " + "ID: " +  t.kind + " | Linha: '" + t.beginLine + "', Coluna: '" + t.beginColumn + "'\n");
           }else if(t.kind == LITERAL_INVALIDA){
               contErroLexico++;
               resultadoLexico.append("Erro: '" + t.image + " | Tipo: <LITERAL_INVALIDA>  |  " + "ID: " +  t.kind + " | Linha: '" + t.beginLine + "', Coluna: '" + t.beginColumn + "'\n");
           }else if(t.kind == NUMERO_INTEIRO_INVALIDO){
                contErroLexico++;
                resultadoLexico.append("Erro: '" + t.image + " | Tipo: <NUMERO_INTEIRO_INVALIDO>  |  " + "ID: " +  t.kind + " | Linha: '" + t.beginLine + "', Coluna: '" + t.beginColumn + "'\n");
           }else if(t.kind == NUMERO_REAL_INVALIDO){
               contErroLexico++;
                resultadoLexico.append("Erro: '" + t.image + " | Tipo: <NUMERO_REAL_INVALIDO>  |  " + "ID: " +  t.kind + " | Linha: '" + t.beginLine + "', Coluna: '" + t.beginColumn + "'\n");
           }

           else{
               contErroLexico++;
               resultadoLexico.append("Erro: '" + t.image + "] | Tipo: <IDENTIFICADOR_INVALIDO>  |  " + "ID: " +  t.kind + " | Linha: '" + t.beginLine + "', Coluna: '" + t.beginColumn + "'\n");
           }
           leituraDeTokens();
       }catch(Error erro){
           resultadoLexico.append("Erro: " + erro.getMessage() + "\n");
           leituraDeTokens();
       }
   }

   public String getTokens(String args[], String textoParaAnalisar) {
       Linguagem linguagem;
        // Verifica os argumentos para determinar como obter a entrada
       if(args.length == 0){
           java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textoParaAnalisar.getBytes());
           linguagem = new classes.Linguagem(targetStream);
       }else if(args.length == 1){
           try{
               linguagem = new Linguagem(new java.io.FileInputStream(args[0]));
           }catch(java.io.FileNotFoundException e){
               System.err.println(args[0] + " n\u00e3o foi encontrado." );
               System.err.println(e);
               return args[0] + " n\u00e3o foi encontrado.";
           }
       }else{
           System.out.println("Use:\njava Linguagem2023 < inputFile");
           System.out.println("ou java Linguagem2023 inputFile");
           return "Use:java Linguagem2023 < inputFile";
       }
       // (CONTEUDO LIVRO) ANALISE SINTATICA
       // Realiza a análise léxica e retorna o resultado como uma string
       this.debug_recovery = true;
       this.leituraDeTokens();
       resultadoLexico.append("<EOF>");
       return resultadoLexico.toString();
   }

   public String getResultadoLexico(){
       return resultadoLexico.toString();
   }

   //CONTEUDO LIVRO
    static public String im(int x)
    {
        int k;
        String s;
        s = tokenImage[x];
        k = s.lastIndexOf("\"");
        try {s = s.substring(1,k);}
        catch (StringIndexOutOfBoundsException e)
        {}
        return s;
    }

    public void consumeUntil(RecoverySet g, ParseException e, String met) throws  ParseException {
         Token tok;
         if (g == null){
             throw e;
         }
         System.out.println("********* " + met);
         tok = getToken(1);
         while (!eof){

             if (g.contains(tok.kind)) {
                 System.out.println("Encontrado token de sincronizacao: " + tok.image);
                 break;
             }
             getNextToken();
             tok = getToken(1);
             if (tok.kind == EOF && !g.contains(EOF)){
                 eof = true;
             }
         }
        System.out.println(e.getMessage());
        this.contParserError++;
     }

    public String analisarSintatica(String args[], String textToAnalyze) throws ParseException, ParseEOFException  {
        Linguagem linguagem = this.readInput(args, textToAnalyze);
        StringBuilder logSaida = new StringBuilder("");
        errosSintaticos = new ArrayList<ErrorStruct>();
        // Realiza a análise léxica e começa a análise sintática
        this.leituraDeTokens();
        resultadoLexico.append("<EOF>");

        try {
            linguagem.begin_program();
        }catch (ParseException ex) {
            return ex.getMessage().toString();
        }
        // Se houver erros sintáticos, registra e retorna detalhes sobre eles
        if(Linguagem.errosSintaticos.size() > 0){
             logSaida.append("Erros sintaticos encontrados :" + errosSintaticos.size() + "\n");
             for (ErrorStruct err: errosSintaticos){
                 logSaida.append(err.getMsg() + "\t\t");
                 logSaida.append("Esperado:" + err.expected());
                 logSaida.append("Linha: " + err.getError().currentToken.beginLine);
                 logSaida.append("; Coluna: " + err.getError().currentToken.endColumn + "\n");
             }
        }
        linguagem = null;
        return logSaida.toString();
    }

    private Linguagem readInput(String args[], String textToAnalyze) {
        Linguagem sintatico = null;
        // Verifica os argumentos para determinar como obter a entrada
        if(args.length == 0){
            java.io.InputStream targetStream = new java.io.ByteArrayInputStream(textToAnalyze.getBytes());
            sintatico = new Linguagem(targetStream);
        }
        else if(args.length == 1){
            try{
                sintatico = new Linguagem(new java.io.FileInputStream(args[0]));
            }
            catch(java.io.FileNotFoundException e){
                System.err.println(args[0] + " was not found." );
                System.err.println(e);
            }
        }
        else{
            System.out.println("Use:\njava Sintatico < inputFile");
            System.out.println("or java Sintatico inputFile");
        }
        return sintatico;
    }

    public String errorListToString(String message, List<String> errors) {
        StringBuilder sb = new StringBuilder(message);
        System.out.println("tamanho da lista de erros:  " + errors.size());
        sb.append(String.format(" : %s", errors.size())).append("\n");
        for (String s : errors) {
            sb.append(s).append("\n");
        }
        return sb.toString();
    }

//COMENTARIO BLOCO NÃO FINALIZADO

//TOKEN: {
  //<COMENTARIO_BLOCO_ERRO: "/*" (~[])* (~["*"]~["/"]) >
  //<COMENTARIO_BLOCO_ERRO: "/*" (~[])* ("*/")>
  //<COMENTARIO_BLOCO_ERRO: "/*" (~"*/")* >
//}
  final public void begin_program() throws ParseException, ParseException, ParseEOFException {
    trace_call("begin_program");
    try {
 RecoverySet r = new RecoverySet(EOF);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DO:
          programa(r);
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        jj_consume_token(0);
      } catch (ParseException e) {
        consumeUntil(r, e, "begin_program");
        errosSintaticos.add(new ErrorStruct("ERRO: Forma geral do programa inv\u00e1lida", e));
      }
    } finally {
      trace_return("begin_program");
    }
  }

  final public void definicao_programa(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("definicao_programa");
    try {
      try {
        jj_consume_token(DO);
        jj_consume_token(THIS);
        jj_consume_token(IDENTIFICADOR);
                                     acaoSemantica.a1(getToken(0));
        jj_consume_token(ABRECOLCHETE);
        jj_consume_token(FECHACOLCHETE);
      } catch (ParseException e) {
         consumeUntil(g, e, "definicao_programa");
         errosSintaticos.add(new ErrorStruct("ERRO: Defini\u00e7\u00e3o do programa inv\u00e1lida", e));
      }
    } finally {
      trace_return("definicao_programa");
    }
  }

  final public void corpo_programa(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("corpo_programa");
    try {
    RecoverySet f1 = new RecoverySet(FECHACOLCHETE);
      try {
        jj_consume_token(BODY);
        jj_consume_token(ABRECOLCHETE);
        lista_de_comandos(f1);
        jj_consume_token(FECHACOLCHETE);
      } catch (ParseException e) {
        consumeUntil(g, e, "body");
        errosSintaticos.add(new ErrorStruct("ERRO: Defini\u00e7\u00e3o do corpo do programa inv\u00e1lido", e));
      }
    } finally {
      trace_return("corpo_programa");
    }
  }

  final public void programa(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("programa");
    try {
    RecoverySet body = new RecoverySet(BODY);
    RecoverySet decl = new RecoverySet(DECLARATION);
    RecoverySet body_decl = decl.union(body);
    RecoverySet rs_description = new RecoverySet(DESCRIPTION);
    RecoverySet description_eof = g.union(rs_description);
      try {
        definicao_programa(body_decl);
        declaracao_de_tipo_enumerado(body_decl);
        declaracao_de_constantes_e_variaveis(body);
        corpo_programa(description_eof);
        descricao(g);
                      acaoSemantica.a2();
      } catch (ParseException e) {
        consumeUntil(g, e, "programa");
      }
    } finally {
      trace_return("programa");
    }
  }

  final public void descricao(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("descricao");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DESCRIPTION:
          jj_consume_token(DESCRIPTION);
          jj_consume_token(CONSTANTE_LITERAL);
          break;
        default:
          jj_la1[1] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "descricao");
        errosSintaticos.add(new ErrorStruct("ERRO:  Descri\u00e7\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("descricao");
    }
  }

  final public void lista_de_comandos(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("lista_de_comandos");
    try {
    RecoverySet lista_com = First.lista_de_comandos;
      try {
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DESIGNATE:
            comando_de_atribuicao(lista_com);
            break;
          case READ:
            comando_entrada_de_dados(lista_com);
            break;
          case WRITE:
            comando_saida_de_dados(lista_com);
            break;
          case AVALIATE:
            comando_de_selecao(lista_com);
            break;
          case REPEAT:
            comando_de_repeticao(lista_com);
            break;
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DESIGNATE:
          case READ:
          case WRITE:
          case AVALIATE:
          case REPEAT:
            ;
            break;
          default:
            jj_la1[3] = jj_gen;
            break label_1;
          }
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "lista_de_comandos");
        errosSintaticos.add(new ErrorStruct("ERRO: Lista de comandos e/ou comando inv\u00e1lido", e));
      }
    } finally {
      trace_return("lista_de_comandos");
    }
  }

/*void lista_de_comandos2(RecoverySet g)throws ParseException, ParseEOFException: {}
{
   try{
         (comando(g)lista_de_comandos2(g))?
   }catch(ParseException e){
        consumeUntil(g, e, "lista_de_comandos2");
        errosSintaticos.add(new ErrorStruct("ERRO: Lista de comandos e/ou comando", e));
   }
}

void comando(RecoverySet g)throws ParseException, ParseEOFException: {}
{
    try{
        comando_de_atribuicao(g) | comando_entrada_de_dados(g) | comando_saida_de_dados(g) | comando_de_selecao(g) | comando_de_repeticao(g)
    }catch(ParseException e){
        consumeUntil(g, e, "comando");
        errosSintaticos.add(new ErrorStruct("ERRO: Escolha do tipo de comando", e));
}
}*/
  final public void declaracao_de_tipo_enumerado(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("declaracao_de_tipo_enumerado");
    try {
    RecoverySet f1 = new RecoverySet(FECHACOLCHETE);
      try {
        if (jj_2_1(2)) {
          jj_consume_token(DECLARATION);
          jj_consume_token(TYPE);
          jj_consume_token(ABRECOLCHETE);
          varios_identificador_is(f1);
          jj_consume_token(FECHACOLCHETE);
        } else {
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "declaracao_de_tipo_enumerado");
        errosSintaticos.add(new ErrorStruct("ERRO: Declara\u00e7\u00e3o de tipo enumerado inv\u00e1lido", e));
      }
    } finally {
      trace_return("declaracao_de_tipo_enumerado");
    }
  }

  final public void lista_de_identificadores_tipo_enumerado(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("lista_de_identificadores_tipo_enumerado");
    try {
      try {
        jj_consume_token(IDENTIFICADOR);
                        acaoSemantica.a4(getToken(0));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          jj_consume_token(VIRGULA);
          lista_de_identificadores_tipo_enumerado(g);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "lista_de_identificadores");
        errosSintaticos.add(new ErrorStruct("ERRO: Listagem dos identificadores e/ou identificador incorreto (Identificadores tipo enumerado)", e));
      }
    } finally {
      trace_return("lista_de_identificadores_tipo_enumerado");
    }
  }

  final public void lista_de_identificadores_constantes(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("lista_de_identificadores_constantes");
    try {
      try {
        jj_consume_token(IDENTIFICADOR);
                        acaoSemantica.a9(getToken(0));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          jj_consume_token(VIRGULA);
          lista_de_identificadores_constantes(g);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "lista_de_identificadores");
        errosSintaticos.add(new ErrorStruct("ERRO: Listagem dos identificadores e/ou identificador incorreto (Identificadores de constantes)", e));
      }
    } finally {
      trace_return("lista_de_identificadores_constantes");
    }
  }

/*void lista_de_identificadores2(RecoverySet g)throws ParseException, ParseEOFException: {}
{
    try{
        (<VIRGULA> lista_de_identificadores(g))?
    }catch(ParseException e){
        consumeUntil(g, e, "lista_de_identificadores2");
        errosSintaticos.add(new ErrorStruct("ERRO: Lista de identificadores e/ou identificador", e));

    }
}*/
  final public void varios_identificador_is(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("varios_identificador_is");
    try {
    RecoverySet f1 = new RecoverySet(FECHACHAVES);
      try {
        jj_consume_token(IDENTIFICADOR);
                         acaoSemantica.a3(getToken(0));
        jj_consume_token(IS);
        jj_consume_token(ABRECHAVES);
        lista_de_identificadores_tipo_enumerado(f1);
        jj_consume_token(FECHACHAVES);
        jj_consume_token(PONTO);
        varios_identificador_is2(g);
      } catch (ParseException e) {
             consumeUntil(g, e, "varios_identificador_is");
             errosSintaticos.add(new ErrorStruct("ERRO: Identificador (declara\u00e7\u00e3o de tipo enumerado) inv\u00e1lido", e));
      }
    } finally {
      trace_return("varios_identificador_is");
    }
  }

  final public void varios_identificador_is2(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("varios_identificador_is2");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          varios_identificador_is(g);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "varios_identificador_is2");
        errosSintaticos.add(new ErrorStruct("ERRO: Listagem para mais de um Identificador (declara\u00e7\u00e3o de tipo enumerado) inv\u00e1lido", e));
      }
    } finally {
      trace_return("varios_identificador_is2");
    }
  }

  final public void declaracao_de_constantes_e_variaveis(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("declaracao_de_constantes_e_variaveis");
    try {
    RecoverySet f1 = new RecoverySet(FECHACOLCHETE);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DECLARATION:
          jj_consume_token(DECLARATION);
          jj_consume_token(CONSTANT);
          jj_consume_token(AND);
          jj_consume_token(VARIABLE);
          jj_consume_token(ABRECOLCHETE);
          ordem_constantes_e_variaveis(f1);
          jj_consume_token(FECHACOLCHETE);
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                  consumeUntil(g, e, "declaracao_de_constantes_e_variaveis");
                  errosSintaticos.add(new ErrorStruct("ERRO: Declara\u00e7\u00e3o de constantes e variaveis inv\u00e1lidas", e));
      }
    } finally {
      trace_return("declaracao_de_constantes_e_variaveis");
    }
  }

  final public void ordem_constantes_e_variaveis(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("ordem_constantes_e_variaveis");
    try {
      try {
        jj_consume_token(AS);
        ordem(g);
      } catch (ParseException e) {
           consumeUntil(g, e, "ordem_constantes_e_variaveis");
           errosSintaticos.add(new ErrorStruct("ERRO: 'as' incorreto e/ou faltando declarar ordem ('constant'/'variable')", e));
      }
    } finally {
      trace_return("ordem_constantes_e_variaveis");
    }
  }

  final public void ordem(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("ordem");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CONSTANT:
          jj_consume_token(CONSTANT);
                   acaoSemantica.a5();
          c(g);
          break;
        case VARIABLE:
          jj_consume_token(VARIABLE);
                                                           acaoSemantica.a8();
          v(g);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
         consumeUntil(g, e, "ordem");
         errosSintaticos.add(new ErrorStruct("ERRO: Ordem da declara\u00e7\u00e3o de constantes e variaveis inv\u00e1lida", e));
      }
    } finally {
      trace_return("ordem");
    }
  }

  final public void c(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("c");
    try {
      try {
        constantes(g);
        c2(g);
      } catch (ParseException e) {
                     consumeUntil(g, e, "c");
                     errosSintaticos.add(new ErrorStruct("ERRO: Declara\u00e7\u00e3o de constantes inv\u00e1lida", e));
      }
    } finally {
      trace_return("c");
    }
  }

  final public void c2(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("c2");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          jj_consume_token(VARIABLE);
                         acaoSemantica.a8();
          variaveis(g);
          break;
        default:
          jj_la1[9] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                     consumeUntil(g, e, "c2");
                     errosSintaticos.add(new ErrorStruct("ERRO: Declara\u00e7\u00e3o variaveis inv\u00e1lida (dentro escopo de constantes)", e));
      }
    } finally {
      trace_return("c2");
    }
  }

  final public void v(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("v");
    try {
      try {
        variaveis(g);
        v2(g);
      } catch (ParseException e) {
                     consumeUntil(g, e, "v");
                     errosSintaticos.add(new ErrorStruct("ERRO: Declara\u00e7\u00e3o variaveis inv\u00e1lida", e));
      }
    } finally {
      trace_return("v");
    }
  }

  final public void v2(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("v2");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AS:
          jj_consume_token(AS);
          jj_consume_token(CONSTANT);
                          acaoSemantica.a5();
          constantes(g);
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                     consumeUntil(g, e, "v2");
                     errosSintaticos.add(new ErrorStruct("ERRO: constantes inv\u00e1lida (dentro escopo de vari\u00e1veis)", e));
      }
    } finally {
      trace_return("v2");
    }
  }

  final public void constantes(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("constantes");
    try {
    RecoverySet f1 = new RecoverySet(IS);
    RecoverySet f2 = new RecoverySet(ATRIBUI);
    RecoverySet f3 = new RecoverySet(PONTO);
      try {
        lista_de_identificadores_constantes(f1);
        jj_consume_token(IS);
        tipo_constante(f2);
                                                                        acaoSemantica.a6();
        jj_consume_token(ATRIBUI);
        valor(f3);
                                                                                                                  acaoSemantica.a7(getToken(0).image);
        jj_consume_token(PONTO);
        constantes2(g);
      } catch (ParseException e) {
                  consumeUntil(g, e, "constantes");
                  errosSintaticos.add(new ErrorStruct("ERRO: Declara\u00e7\u00e3o de constantes formulada incorretamente", e));
      }
    } finally {
      trace_return("constantes");
    }
  }

  final public void constantes2(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("constantes2");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          constantes(g);
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                  consumeUntil(g, e, "constantes2");
                  errosSintaticos.add(new ErrorStruct("ERRO: Formula\u00e7\u00e3o de mais de uma constante inv\u00e1lida", e));
      }
    } finally {
      trace_return("constantes2");
    }
  }

  final public void variaveis(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("variaveis");
    try {
    RecoverySet f1 = new RecoverySet(IS);
    RecoverySet f2 = new RecoverySet(PONTO);
      try {
        lista_de_identificadores_variaveis(f1);
        jj_consume_token(IS);
        tipo(f2);
                                                              acaoSemantica.a6();
        jj_consume_token(PONTO);
        variaveis2(g);
      } catch (ParseException e) {
                  consumeUntil(g, e, "variaveis");
                  errosSintaticos.add(new ErrorStruct("ERRO: Declara\u00e7\u00e3o de vari\u00e1veis formulada incorretamente", e));
      }
    } finally {
      trace_return("variaveis");
    }
  }

  final public void variaveis2(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("variaveis2");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          variaveis(g);
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                  consumeUntil(g, e, "variaveis2");
                  errosSintaticos.add(new ErrorStruct("ERRO: Formula\u00e7\u00e3o de mais de uma vari\u00e1vel inv\u00e1lida", e));
      }
    } finally {
      trace_return("variaveis2");
    }
  }

  final public void lista_de_identificadores_variaveis(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("lista_de_identificadores_variaveis");
    try {
      try {
        jj_consume_token(IDENTIFICADOR);
                          acaoSemantica.a10(getToken(0));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABRECHAVES:
          jj_consume_token(ABRECHAVES);
          jj_consume_token(NUMERO_INTEIRO);
                                                                                          acaoSemantica.a12(getToken(0));
          jj_consume_token(FECHACHAVES);
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
                                                                                                                                              acaoSemantica.a11(getToken(0));
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          jj_consume_token(VIRGULA);
          lista_de_identificadores_variaveis(g);
          break;
        default:
          jj_la1[14] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                  consumeUntil(g, e, "lista_de_identificadores_variaveis");
                  errosSintaticos.add(new ErrorStruct("ERRO: Lista de identificadores (variaveis) inv\u00e1lida", e));
      }
    } finally {
      trace_return("lista_de_identificadores_variaveis");
    }
  }

/*void lista_de_identificadores_variaveis2(RecoverySet g)throws ParseException, ParseEOFException: {}
{
   try{
        ( <VIRGULA> lista_de_identificadores_variaveis(g) )?
   }catch(ParseException e){
                 consumeUntil(g, e, "lista_de_identificadores_variaveis2");
                 errosSintaticos.add(new ErrorStruct("ERRO: Lista de identificadores (variaveis)", e));

         }
}*/

/*void aux_constante_numerica(RecoverySet g)throws ParseException, ParseEOFException: {}
{
    try{

        (<ABRECHAVES> <NUMERO_INTEIRO>  <FECHACHAVES>  )?
    }  catch(ParseException e)
          {
              consumeUntil(g, e, "aux_constante_numerica");
              errosSintaticos.add(new ErrorStruct("ERRO: Declaração de constante numérica", e));
          }
}*/
  final public void tipo(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("tipo");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
                  acaoSemantica.a13();
          break;
        case REAL:
          jj_consume_token(REAL);
                                                 acaoSemantica.a14();
          break;
        case STRING:
          jj_consume_token(STRING);
                                                                                  acaoSemantica.a15();
          break;
        case LOGIC:
          jj_consume_token(LOGIC);
                                                                                                                  acaoSemantica.a16(getToken(0));
          break;
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
                                                                                                                                                                      acaoSemantica.a17(getToken(0));
          break;
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                   consumeUntil(g, e, "tipo");
                   errosSintaticos.add(new ErrorStruct("ERRO: Tipo incompat\u00edvel", e));
      }
    } finally {
      trace_return("tipo");
    }
  }

  final public void tipo_constante(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("tipo_constante");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER:
          jj_consume_token(INTEGER);
                    acaoSemantica.a13();
          break;
        case REAL:
          jj_consume_token(REAL);
                                                   acaoSemantica.a14();
          break;
        case STRING:
          jj_consume_token(STRING);
                                                                                    acaoSemantica.a15();
          break;
        case LOGIC:
          jj_consume_token(LOGIC);
                                                                                                                    acaoSemantica.a16(getToken(0));
          break;
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
                                                                                                                                                                        acaoSemantica.a17(getToken(0));
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                        consumeUntil(g, e, "tipo_constante");
                        errosSintaticos.add(new ErrorStruct("ERRO: Tipo incompat\u00edvel para constante", e));
      }
    } finally {
      trace_return("tipo_constante");
    }
  }

  final public void valor(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("valor");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMERO_INTEIRO:
          jj_consume_token(NUMERO_INTEIRO);
          break;
        case NUMERO_REAL:
          jj_consume_token(NUMERO_REAL);
          break;
        case CONSTANTE_LITERAL:
          jj_consume_token(CONSTANTE_LITERAL);
          break;
        case TRUE:
          jj_consume_token(TRUE);
          break;
        case UNTRUE:
          jj_consume_token(UNTRUE);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                  consumeUntil(g, e, "valor");
                  errosSintaticos.add(new ErrorStruct("ERRO: Valor inv\u00e1lido", e));
      }
    } finally {
      trace_return("valor");
    }
  }

/*
void constante_logica(RecoverySet g)throws ParseException, ParseEOFException: {}
{
    try{
         <TRUE> | <UNTRUE>
    } catch(ParseException e) {
      consumeUntil(g, e, "constante_logica");
      errosSintaticos.add(new ErrorStruct(" ERRO: Constante logica INVALIDA", e));
    }
}*/
  final public void comando_de_atribuicao(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("comando_de_atribuicao");
    try {
    RecoverySet f1 = new RecoverySet(AS);
    RecoverySet f2 = new RecoverySet(PONTO);
      try {
        jj_consume_token(DESIGNATE);
        jj_consume_token(THIS);
                            acaoSemantica.a18();
        lista_de_identificadores_variaveis(f1);
        jj_consume_token(AS);
        expressao(f2);
                                                                                                            acaoSemantica.a19();
        jj_consume_token(PONTO);
      } catch (ParseException e) {
                  consumeUntil(g, e, "comando_de_atribuicao");
                  errosSintaticos.add(new ErrorStruct("ERRO: Comando de atribui\u00e7\u00e3o inv\u00e1lido", e));
      }
    } finally {
      trace_return("comando_de_atribuicao");
    }
  }

  final public void expressao(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("expressao");
    try {
      try {
        expressao_aritmetica_ou_logica(g);
        expressao2(g);
      } catch (ParseException e) {
              consumeUntil(g, e, "expressao");
              errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("expressao");
    }
  }

  final public void expressao2(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("expressao2");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IGUAL:
        case DIFERENTE:
        case MENOR:
        case MAIOR:
        case MENORIGUAL:
        case MAIORIGUAL:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IGUAL:
            jj_consume_token(IGUAL);
            expressao_aritmetica_ou_logica(g);
                                                    acaoSemantica.a36();
            break;
          case DIFERENTE:
            jj_consume_token(DIFERENTE);
            expressao_aritmetica_ou_logica(g);
                                                                                                                          acaoSemantica.a37();
            break;
          case MENOR:
            jj_consume_token(MENOR);
            expressao_aritmetica_ou_logica(g);
                                                                                                                                                                                             acaoSemantica.a38();
            break;
          case MAIOR:
            jj_consume_token(MAIOR);
            expressao_aritmetica_ou_logica(g);
                                                                                                                                                                                                                                                               acaoSemantica.a39();
            break;
          case MENORIGUAL:
            jj_consume_token(MENORIGUAL);
            expressao_aritmetica_ou_logica(g);
                                                                                                                                                                                                                                                                                                                                      acaoSemantica.a40();
            break;
          case MAIORIGUAL:
            jj_consume_token(MAIORIGUAL);
            expressao_aritmetica_ou_logica(g);
                                                                                                                                                                                                                                                                                                                                                                                                             acaoSemantica.a41();
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                  consumeUntil(g, e, "expressao2");
                  errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("expressao2");
    }
  }

  final public void expressao_aritmetica_ou_logica(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("expressao_aritmetica_ou_logica");
    try {
      try {
        termo2(g);
        menor_prioridade(g);
      } catch (ParseException e) {
                      consumeUntil(g, e, "expressao_aritmetica_ou_logica");
                      errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("expressao_aritmetica_ou_logica");
    }
  }

  final public void menor_prioridade(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("menor_prioridade");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MAIS:
        case MENOS:
        case OU:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case MAIS:
            jj_consume_token(MAIS);
            termo2(g);
            menor_prioridade(g);
                                                  acaoSemantica.a42();
            break;
          case MENOS:
            jj_consume_token(MENOS);
            termo2(g);
            menor_prioridade(g);
                                                                                                                 acaoSemantica.a43();
            break;
          case OU:
            jj_consume_token(OU);
            termo2(g);
            menor_prioridade(g);
                                                                                                                                                                            acaoSemantica.a44();
            break;
          default:
            jj_la1[20] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                      consumeUntil(g, e, "menor_prioridade");
                      errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("menor_prioridade");
    }
  }

  final public void termo2(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("termo2");
    try {
      try {
        termo1(g);
        media_prioridade(g);
      } catch (ParseException e) {
                      consumeUntil(g, e, "termo2");
                      errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("termo2");
    }
  }

  final public void media_prioridade(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("media_prioridade");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VEZES:
        case DIVISAO:
        case RESTODIVISAO:
        case RESTODIVISAOINTEIRA:
        case E:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case VEZES:
            jj_consume_token(VEZES);
            termo1(g);
            media_prioridade(g);
                                                  acaoSemantica.a45();
            break;
          case DIVISAO:
            jj_consume_token(DIVISAO);
            termo1(g);
            media_prioridade(g);
                                                                                                                   acaoSemantica.a46();
            break;
          case RESTODIVISAO:
            jj_consume_token(RESTODIVISAO);
            termo1(g);
            media_prioridade(g);
                                                                                                                                                                                        acaoSemantica.a47();
            break;
          case RESTODIVISAOINTEIRA:
            jj_consume_token(RESTODIVISAOINTEIRA);
            termo1(g);
            media_prioridade(g);
                                                                                                                                                                                                                                                                    acaoSemantica.a48();
            break;
          case E:
            jj_consume_token(E);
            termo1(g);
            media_prioridade(g);
                                                                                                                                                                                                                                                                                                                              acaoSemantica.a49();
            break;
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[23] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                      consumeUntil(g, e, "media_prioridade");
                      errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("media_prioridade");
    }
  }

  final public void termo1(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("termo1");
    try {
      try {
        elemento(g);
        maior_prioridade(g);
      } catch (ParseException e) {
                      consumeUntil(g, e, "termo1");
                      errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("termo1");
    }
  }

  final public void maior_prioridade(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("maior_prioridade");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POTENCIA:
          jj_consume_token(POTENCIA);
          elemento(g);
          maior_prioridade(g);
                                                    acaoSemantica.a50();
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
      } catch (ParseException e) {
          consumeUntil(g, e, "maior_prioridade");
          errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("maior_prioridade");
    }
  }

  final public void elemento(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("elemento");
    try {
    RecoverySet f1 = new RecoverySet(FECHAPARENTESES);
    RecoverySet f2 = new RecoverySet(FECHAPARENTESES);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
                           acaoSemantica.a24(getToken(0));
          indice(g);
                                                                      acaoSemantica.a51(getToken(0));
          break;
        case NUMERO_REAL:
          jj_consume_token(NUMERO_REAL);
                           acaoSemantica.a27(Float.parseFloat(getToken(0).image));
          break;
        case NUMERO_INTEIRO:
          jj_consume_token(NUMERO_INTEIRO);
                              acaoSemantica.a26(Integer.parseInt(getToken(0).image));
          break;
        case CONSTANTE_LITERAL:
          jj_consume_token(CONSTANTE_LITERAL);
                                 acaoSemantica.a28(getToken(0).image);
          break;
        case TRUE:
          jj_consume_token(TRUE);
                    acaoSemantica.a52();
          break;
        case UNTRUE:
          jj_consume_token(UNTRUE);
                                                     acaoSemantica.a53();
          break;
        case ABREPARENTESES:
          jj_consume_token(ABREPARENTESES);
          expressao(f1);
          jj_consume_token(FECHAPARENTESES);
          break;
        case NAO:
          jj_consume_token(NAO);
          jj_consume_token(ABREPARENTESES);
          expressao(f2);
          jj_consume_token(FECHAPARENTESES);
                                                                    acaoSemantica.a54();
          break;
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                      consumeUntil(g, e, "elemento");
                      errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("elemento");
    }
  }

  final public void indice(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("indice");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ABRECHAVES:
          jj_consume_token(ABRECHAVES);
          jj_consume_token(NUMERO_INTEIRO);
                                        acaoSemantica.a12(getToken(0));
          jj_consume_token(FECHACHAVES);
          break;
        default:
          jj_la1[26] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                      consumeUntil(g, e, "indice");
                      errosSintaticos.add(new ErrorStruct("ERRO: Express\u00e3o inv\u00e1lida", e));
      }
    } finally {
      trace_return("indice");
    }
  }

/*
void expressao_atribuicao(RecoverySet g): {}
{
    try{
        expressao_aritmetica(g) | expressao_relacional(g) | expressao_logica(g)
    }catch(ParseException e){
                  consumeUntil(g, e, "expressao_atribuicao");
          }

}

void constantes_aux(RecoverySet g): {}
{
    try{
        <NUMERO_REAL> | <NUMERO_INTEIRO> | <CONSTANTE_LITERAL> | constante_logica(g)
    }catch(ParseException e){
                  consumeUntil(g, e, "constantes_aux");
          }

}

void expressao_aritmetica(RecoverySet g): {}
{
    try{
        termo_aritmetico(g) operadores_aritmeticos(g) termo_aritmetico(g)
    }catch(ParseException e){
                  consumeUntil(g, e, "expressao_aritmetica");
          }

}

void operadores_aritmeticos(): {}
{
    <MAIS> | <MENOS> | <VEZES> | <DIVISAO> | <POTENCIA> | <RESTODIVISAO> | <RESTODIVISAOINTEIRA>
}

void termo_aritmetico(RecoverySet g):
{
    RecoverySet f1 = new RecoverySet(FECHAPARENTESES);
 }
{
    try{
        <IDENTIFICADOR> | constantes_aux(g)  | <ABREPARENTESES> expressao_aritmetica(f1)  <FECHAPARENTESES>
    }catch(ParseException e){
                  consumeUntil(g, e, "termo_aritmetico");
          }

}

void expressao_relacional(RecoverySet g): {}
{
    try{
        termo_relacional(g) operadores_relacionais(g) termo_relacional(g)
    }catch(ParseException e){
                  consumeUntil(g, e, "expressao_relacional");
          }
}

void operadores_relacionais(): {}
{
    <IGUAL> | <DIFERENTE> | <MAIOR> | <MENOR> | <MAIORIGUAL> | <MENORIGUAL>
}

void termo_relacional(RecoverySet g):
{
    RecoverySet f1 = new RecoverySet(FECHAPARENTESES);
 }
{
    try{
        <IDENTIFICADOR> | constantes_aux(g) | <ABREPARENTESES> expressao_relacional(f1) <FECHAPARENTESES>
    }catch(ParseException e){
                  consumeUntil(g, e, "termo_relacional");
          }
}

void expressao_logica(RecoverySet g):
{
    RecoverySet f1 = new RecoverySet(E);
    RecoverySet f2 = new RecoverySet(OU);
 }
{
   try{
     LOOKAHEAD(3)constante_logica1(f1) <E> constante_logica1(g) | constante_logica1(f2) <OU> constante_logica1(g) | <NAO> constante_logica1(g)
   }catch(ParseException e){
                 consumeUntil(g, e, "expressao_logica");
         }
}

void constante_logica1(RecoverySet g):
{
    RecoverySet f1 = new RecoverySet(FECHAPARENTESES);
 }
{
    try{
        <IDENTIFICADOR> | constantes_aux(g)  | <ABREPARENTESES> expressao_logica(f1) <FECHAPARENTESES>
    }catch(ParseException e){
                  consumeUntil(g, e, "constante_logica1");
          }
}
*/
  final public void comando_entrada_de_dados(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("comando_entrada_de_dados");
    try {
    RecoverySet fechacol = new RecoverySet(FECHACOLCHETE);
      try {
        jj_consume_token(READ);
        jj_consume_token(THIS);
                       acaoSemantica.a20();
        jj_consume_token(ABRECOLCHETE);
        lista_de_identificadores_variaveis(fechacol);
        jj_consume_token(FECHACOLCHETE);
        jj_consume_token(PONTO);
      } catch (ParseException e) {
        consumeUntil(g, e, "comando_entrada_de_dados");
        errosSintaticos.add(new ErrorStruct("ERRO: Comando de entrada de dados inv\u00e1lida", e));
      }
    } finally {
      trace_return("comando_entrada_de_dados");
    }
  }

  final public void comando_saida_de_dados(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("comando_saida_de_dados");
    try {
    RecoverySet f1 = new RecoverySet(FECHACOLCHETE);
      try {
        jj_consume_token(WRITE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ALL:
          jj_consume_token(ALL);
          jj_consume_token(THIS);
                          acaoSemantica.a21();
          jj_consume_token(ABRECOLCHETE);
          lista_de_identificadores_eou_constantes(f1);
          jj_consume_token(FECHACOLCHETE);
          jj_consume_token(PONTO);
          break;
        case THIS:
          jj_consume_token(THIS);
                      acaoSemantica.a22();
          jj_consume_token(ABRECOLCHETE);
          lista_de_identificadores_eou_constantes(f1);
          jj_consume_token(FECHACOLCHETE);
          jj_consume_token(PONTO);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
      consumeUntil(g, e, "comando_saida_de_dados");
      errosSintaticos.add(new ErrorStruct("ERRO: Comando de sa\u00edda de dados inv\u00e1lida", e));
      }
    } finally {
      trace_return("comando_saida_de_dados");
    }
  }

/*void comando_saida_de_dados2(RecoverySet g)throws ParseException, ParseEOFException:
{}
{
    try{
      <ALL> <THIS> <ABRECOLCHETE> lista_de_identificadores_eou_constantes(g) <FECHACOLCHETE> <PONTO>  | <THIS> <ABRECOLCHETE> lista_de_identificadores_eou_constantes(g) <FECHACOLCHETE> <PONTO>
    }catch(ParseException e){
                  consumeUntil(g, e, "comando_saida_de_dados2");
                  errosSintaticos.add(new ErrorStruct("ERRO: Comando de saída de dados", e));
          }
}*/
  final public void lista_de_identificadores_eou_constantes(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("lista_de_identificadores_eou_constantes");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFICADOR:
          jj_consume_token(IDENTIFICADOR);
                         acaoSemantica.a24(getToken(0));
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ABRECHAVES:
            jj_consume_token(ABRECHAVES);
            jj_consume_token(NUMERO_INTEIRO);
                                                                                          acaoSemantica.a12(getToken(0));
            jj_consume_token(FECHACHAVES);
            break;
          default:
            jj_la1[28] = jj_gen;
            ;
          }
                                                                                                                                              acaoSemantica.a25(getToken(0));
                                                                                                                                                                                  acaoSemantica.a23();
          lista_de_identificadores_eou_constantes2(g);
          break;
        case NUMERO_INTEIRO:
          jj_consume_token(NUMERO_INTEIRO);
                                acaoSemantica.a26(Integer.parseInt(getToken(0).image));
                                                                                          acaoSemantica.a23();
          lista_de_identificadores_eou_constantes2(g);
          break;
        case NUMERO_REAL:
          jj_consume_token(NUMERO_REAL);
                             acaoSemantica.a27(Float.parseFloat(getToken(0).image));
                                                                                       acaoSemantica.a23();
          lista_de_identificadores_eou_constantes2(g);
          break;
        case CONSTANTE_LITERAL:
          jj_consume_token(CONSTANTE_LITERAL);
                                   acaoSemantica.a28(getToken(0).image);
                                                                           acaoSemantica.a23();
          lista_de_identificadores_eou_constantes2(g);
          break;
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
                  consumeUntil(g, e, "lista_de_identificadores_eou_constantes");
                  errosSintaticos.add(new ErrorStruct("ERRO: Lista de identificadores e/ou constantes (comando de sa\u00edda de dados) inv\u00e1lida", e));
      }
    } finally {
      trace_return("lista_de_identificadores_eou_constantes");
    }
  }

  final public void lista_de_identificadores_eou_constantes2(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("lista_de_identificadores_eou_constantes2");
    try {
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRGULA:
          jj_consume_token(VIRGULA);
          lista_de_identificadores_eou_constantes(g);
          break;
        default:
          jj_la1[30] = jj_gen;
          ;
        }
      } catch (ParseException e) {
                  consumeUntil(g, e, "lista_de_identificadores_eou_constantes2");
                  errosSintaticos.add(new ErrorStruct("ERRO: Listagem de  outros identificadores e/ou constantes (comando de sa\u00edda de dados) inv\u00e1lida", e));
      }
    } finally {
      trace_return("lista_de_identificadores_eou_constantes2");
    }
  }

/*void constante(RecoverySet g)throws ParseException, ParseEOFException:{}
{
    try{
        <NUMERO_INTEIRO> | <NUMERO_REAL> | <CONSTANTE_LITERAL>
    } catch(ParseException e){
                        consumeUntil(g, e, "constante");
                        errosSintaticos.add(new ErrorStruct("ERRO: Constante INVALIDA", e));
                }
}*/
  final public void comando_de_selecao(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("comando_de_selecao");
    try {
    RecoverySet f1 = First.comando_selecao;
    RecoverySet f2 = new RecoverySet(PONTO);
      try {
        jj_consume_token(AVALIATE);
        jj_consume_token(THIS);
        expressao(f1);
        ordem_selecao(f2);
                                                           acaoSemantica.a29();
      } catch (ParseException e) {
          consumeUntil(g, e, "comando_de_selecao");
          errosSintaticos.add(new ErrorStruct("ERRO: Comando de sele\u00e7\u00e3o inv\u00e1lido", e));
      }
    } finally {
      trace_return("comando_de_selecao");
    }
  }

  final public void ordem_selecao(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("ordem_selecao");
    try {
    RecoverySet f1 = new RecoverySet(FECHACOLCHETE);
    RecoverySet f2 = new RecoverySet(PONTO);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
          jj_consume_token(TRUE);
          jj_consume_token(RESULT);
                           acaoSemantica.a30();
          jj_consume_token(ABRECOLCHETE);
          lista_de_comandos(f1);
          jj_consume_token(FECHACOLCHETE);
          ordem_true(f2);
          jj_consume_token(PONTO);
          break;
        case UNTRUE:
          jj_consume_token(UNTRUE);
          jj_consume_token(RESULT);
                             acaoSemantica.a31();
          jj_consume_token(ABRECOLCHETE);
          lista_de_comandos(f1);
          jj_consume_token(FECHACOLCHETE);
          ordem_untrue(f2);
          jj_consume_token(PONTO);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "resultado logico");
        errosSintaticos.add(new ErrorStruct("Erro: Listagem do resultado logico inv\u00e1lido (true/untrue)", e));
      }
    } finally {
      trace_return("ordem_selecao");
    }
  }

  final public void ordem_true(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("ordem_true");
    try {
    RecoverySet f1 = new RecoverySet(FECHACOLCHETE);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case UNTRUE:
          jj_consume_token(UNTRUE);
          jj_consume_token(RESULT);
                             acaoSemantica.a32();
          jj_consume_token(ABRECOLCHETE);
          lista_de_comandos(f1);
          jj_consume_token(FECHACOLCHETE);
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "true_result_cont");
        errosSintaticos.add(new ErrorStruct("ERRO: '.' e/ou formula\u00e7\u00e3o untrue inv\u00e1lido", e));
      }
    } finally {
      trace_return("ordem_true");
    }
  }

  final public void ordem_untrue(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("ordem_untrue");
    try {
    RecoverySet f1 = new RecoverySet(FECHACOLCHETE);
      try {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TRUE:
          jj_consume_token(TRUE);
          jj_consume_token(RESULT);
                           acaoSemantica.a32();
          jj_consume_token(ABRECOLCHETE);
          lista_de_comandos(f1);
          jj_consume_token(FECHACOLCHETE);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
      } catch (ParseException e) {
        consumeUntil(g, e, "untrue_result_cont");
        errosSintaticos.add(new ErrorStruct("ERRO: '.' e/ou formula\u00e7\u00e3o true inv\u00e1lida", e));
      }
    } finally {
      trace_return("ordem_untrue");
    }
  }

/*void ordem_selecao(RecoverySet g)throws ParseException, ParseEOFException:
{ }
{
    try{
        t(g) ordem_true(g) | u(g) ordem_untrue(g)
    }catch(ParseException e){
              consumeUntil(g, e, "ordem_selecao");
              errosSintaticos.add(new ErrorStruct("ERRO: Ordem de seleção", e));
    }
}

void ordem_untrue(RecoverySet g)throws ParseException, ParseEOFException:
{}
{
    try{
        t(g) <PONTO> | <PONTO>
    }catch(ParseException e){
                  consumeUntil(g, e, "ordem_untrue");
                  errosSintaticos.add(new ErrorStruct("ERRO: Ordem de seleção (untrue)", e));
          }
}

void ordem_true(RecoverySet g)throws ParseException, ParseEOFException:
{}
{
    try{
        u(g) <PONTO> | <PONTO>
    }catch(ParseException e){
        consumeUntil(g, e, "ordem_true");
        errosSintaticos.add(new ErrorStruct("ERRO: Ordem de seleção (true)", e));

    }
}

void t(RecoverySet g)throws ParseException, ParseEOFException:
{}
{
    try{
        <TRUE> <RESULT> <ABRECOLCHETE> lista_de_comandos(g) <FECHACOLCHETE>
    }catch(ParseException e){
                  consumeUntil(g, e, "t");
                  errosSintaticos.add(new ErrorStruct("ERRO: Declaração true INVALIDA", e));

          }
}

void u(RecoverySet g)throws ParseException, ParseEOFException:
{}
{
    try{
        <UNTRUE> <RESULT> <ABRECOLCHETE> lista_de_comandos(g) <FECHACOLCHETE>
    }catch(ParseException e){
                  consumeUntil(g, e, "u");
                  errosSintaticos.add(new ErrorStruct("ERRO: Declaração untrue INVALIDA", e));
          }
}*/
  final public void comando_de_repeticao(RecoverySet g) throws ParseException, ParseException, ParseEOFException {
    trace_call("comando_de_repeticao");
    try {
      try {
        jj_consume_token(REPEAT);
        jj_consume_token(THIS);
                         acaoSemantica.a33();
        expressao(g);
                                                             acaoSemantica.a34();
        jj_consume_token(ABRECOLCHETE);
        lista_de_comandos(g);
        jj_consume_token(FECHACOLCHETE);
                                                                                                                                        acaoSemantica.a35();
        jj_consume_token(PONTO);
      } catch (ParseException e) {
                  consumeUntil(g, e, "comando_de_repeticao");
                  errosSintaticos.add(new ErrorStruct("ERRO: Comando de repeti\u00e7\u00e3o inv\u00e1lido", e));
      }
    } finally {
      trace_return("comando_de_repeticao");
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(DECLARATION)) return true;
    if (jj_scan_token(TYPE)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LinguagemTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[34];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1000,0x8000,0xb8000000,0xb8000000,0x0,0x0,0x0,0x10000,0x280000,0x400000,0x400000,0x0,0x0,0x0,0x0,0x7800000,0x7800000,0x800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x800,0x0,0x40002000,0x0,0x800,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x8,0x8,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x200,0x0,0x0,0x3,0xfc0000,0xfc0000,0x2001800,0x2001800,0x1036000,0x1036000,0x8000,0xc000003,0x40,0x0,0x40,0x0,0x200,0x3,0x2,0x1,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x4,0x4,0x0,0x0,0x4,0x4,0x140,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x144,0x0,0x0,0x0,0x144,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Linguagem(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Linguagem(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LinguagemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Linguagem(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new LinguagemTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Linguagem(LinguagemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LinguagemTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 34; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      trace_token(token, "");
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    } else {
      trace_scan(jj_scanpos, kind);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
      trace_token(token, " (in getNextToken)");
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[78];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 34; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 78; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  private int trace_indent = 0;
  private boolean trace_enabled = true;

/** Enable tracing. */
  final public void enable_tracing() {
    trace_enabled = true;
  }

/** Disable tracing. */
  final public void disable_tracing() {
    trace_enabled = false;
  }

  private void trace_call(String s) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Call:   " + s);
    }
    trace_indent = trace_indent + 2;
  }

  private void trace_return(String s) {
    trace_indent = trace_indent - 2;
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.println("Return: " + s);
    }
  }

  private void trace_token(Token t, String where) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Consumed token: <" + tokenImage[t.kind]);
      if (t.kind != 0 && !tokenImage[t.kind].equals("\"" + t.image + "\"")) {
        System.out.print(": \"" + t.image + "\"");
      }
      System.out.println(" at line " + t.beginLine + " column " + t.beginColumn + ">" + where);
    }
  }

  private void trace_scan(Token t1, int t2) {
    if (trace_enabled) {
      for (int i = 0; i < trace_indent; i++) { System.out.print(" "); }
      System.out.print("Visited token: <" + tokenImage[t1.kind]);
      if (t1.kind != 0 && !tokenImage[t1.kind].equals("\"" + t1.image + "\"")) {
        System.out.print(": \"" + t1.image + "\"");
      }
      System.out.println(" at line " + t1.beginLine + " column " + t1.beginColumn + ">; Expected token: <" + tokenImage[t2] + ">");
    }
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
